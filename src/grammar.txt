
// Using Extended Backus-Naur form, context free grammar of the language

letter      = "A" | "B" | "C" | "D" | "E" | "F" | "G"
            | "H" | "I" | "J" | "K" | "L" | "M" | "N"
            | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
            | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
            | "c" | "d" | "e" | "f" | "g" | "h" | "i"
            | "j" | "k" | "l" | "m" | "n" | "o" | "p"
            | "q" | "r" | "s" | "t" | "u" | "v" | "w"
            | "x" | "y" | "z" ;
digit       = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
identifier  = letter , { letter | digit | "_" } ;
number      = digit , { digit } ;

operator    = "+" | "-" | "*" | "/" ;
rel_op      = "==" | "!=" | "<" | ">" | "<=" | ">=" ;

expression  = term , { operator , term } ;
term        = factor , { ( "*" | "/" ) , factor } ;
factor      = number | identifier | "(" , expression , ")" ;

condition   = expression , rel_op , expression ;

statement   = assignment | if_statement | block ;
assignment  = identifier , "=" , expression , ";" ;
if_statement = "if" , "(" , condition , ")" , block ;
block       = "{" , { statement } , "}" ;

program     = { statement } ;
